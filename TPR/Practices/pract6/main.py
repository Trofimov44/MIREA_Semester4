from sympy import Matrix, Rational
from fractions import Fraction
import math

def simplex_method(obj, constraints, rhs):
    n = len(obj)  # —á–∏—Å–ª–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (x1, x2)
    m = len(constraints)  # —á–∏—Å–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    total_vars = n + m

    # –¢–∞–±–ª–∏—Ü–∞: (m+1) —Å—Ç—Ä–æ–∫, (n + m + 1) —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ + slack + RHS)
    table = [[Fraction(0)] * (total_vars + 1) for _ in range(m + 1)]

    # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞ Z)
    for i in range(n):
        table[0][i] = -Fraction(obj[i])

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è + slack-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for i in range(m):
        for j in range(n):
            table[i + 1][j] = Fraction(constraints[i][j])
        table[i + 1][n + i] = Fraction(1)  # slack-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        table[i + 1][-1] = Fraction(rhs[i])

    basis = [n + i for i in range(m)]  # –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–∑–∏—Å (slack-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)

    while any(table[0][j] < 0 for j in range(total_vars)):
        key_col = min((j for j in range(total_vars) if table[0][j] < 0), key=lambda j: table[0][j])
        min_ratio = float('inf')
        key_row = -1

        for i in range(1, m + 1):
            if table[i][key_col] > 0:
                ratio = table[i][-1] / table[i][key_col]
                if ratio < min_ratio:
                    min_ratio = ratio
                    key_row = i

        if key_row == -1:
            print("–†–µ—à–µ–Ω–∏–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.")
            return None, None, None, None

        basis[key_row - 1] = key_col
        pivot = table[key_row][key_col]

        for j in range(total_vars + 1):
            table[key_row][j] /= pivot

        for i in range(m + 1):
            if i != key_row:
                factor = table[i][key_col]
                for j in range(total_vars + 1):
                    table[i][j] -= factor * table[key_row][j]

    answers = [Fraction(0)] * n
    for i in range(m):
        if basis[i] < n:
            answers[basis[i]] = table[i + 1][-1]

    z_value = table[0][-1]
    return z_value, answers, basis, table

def get_D_inverse(constraints, basis, n):
    m = len(constraints)
    D = []
    for i in range(m):
        row = []
        for j in range(m):
            var_idx = basis[j]
            if var_idx < len(constraints[0]):  # –µ—Å–ª–∏ –±–∞–∑–∏—Å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è (–Ω–µ slack)
                row.append(Rational(constraints[i][var_idx]))
            else:  # –µ—Å–ª–∏ slack-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                row.append(Rational(1 if var_idx - len(constraints[0]) == i else 0))
        D.append(row)
    
    D_matrix = Matrix(D)
    D_inv = D_matrix.inv()
    return D_inv

def display_dual_problem(obj, constraints, rhs):
    print("\nüìò –°–ò–°–¢–ï–ú–ê –î–í–û–ô–°–¢–í–ï–ù–ù–û–ô –ó–ê–î–ê–ß–ò:")
    print(f"  min:  {' + '.join(f'{rhs[i]}¬∑y{i+1}' for i in range(len(rhs)))}")
    print("  –ø—Ä–∏ —É—Å–ª–æ–≤–∏—è—Ö:")
    n = len(obj)
    m = len(rhs)
    for i in range(n):
        coeffs = [constraints[j][i] for j in range(m)]
        terms = ' + '.join(f"{coeffs[j]}¬∑y{j+1}" for j in range(m))
        print(f"    {terms} ‚â• {obj[i]}")
    print("    y‚ÇÅ, y‚ÇÇ, ..., y‚Çò ‚â• 0")

def check_duality_theorem(C_B, D_inv, answers):
    print("\n –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("  x* (–∏–∑ —Å–∏–º–ø–ª–µ–∫—Å-–º–µ—Ç–æ–¥–∞):")
    for i, x in enumerate(answers, start=1):
        print(f"    x{i} = {x}")
    print("  –ü–µ—Ä–≤–∞—è —Ç–µ–æ—Ä–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ x* ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–¥–∞—á–∏.")

def check_second_duality_theorem(table, basis, m, n, rhs):
    print("\n –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:")
    # –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ y* ‚Äî —ç—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ Z –¥–ª—è slack-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    y_opt = []
    for i in range(m):
        slack_idx = n + i
        found = False
        for j in range(m):
            if basis[j] == slack_idx:
                found = True
                y_opt.append(Fraction(0))  # –µ—Å–ª–∏ slack-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –±–∞–∑–∏—Å–µ, —Ç–æ y_i = 0
                break
        if not found:
            val = table[0][slack_idx]  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Å—Ç—Ä–æ–∫–µ Z
            y_opt.append(-val)  # y_i = -–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    print("  –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (y*):")
    for i, y in enumerate(y_opt, start=1):
        print(f"    y{i} = {y}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    z_value = table[0][-1]
    dual_value = sum(Fraction(rhs[i]) * y_opt[i] for i in range(m))
    print(f"  –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–¥–∞—á–∏: f(x*) = {z_value}")
    print(f"  –ó–Ω–∞—á–µ–Ω–∏–µ –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: g(y*) = {dual_value}")
    print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞: f(x*) {'=' if z_value == dual_value else '!='} g(y*)")

    return y_opt

def check_third_duality_theorem(y_opt, rhs):
    print("\n –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ—Ç—å–µ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:")
    

    return y_opt

def analyze_stability_and_impact(y_opt, rhs, z_value):
    
    # –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ D^{-1} –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    D_inv = [
        [Fraction(1, 2), 0, 0, 0],
        [-1, 1, 0, 0],
        [0, 0, 1, 0],
        [-Fraction(3, 2), 0, 0, 1]
    ]

    # –í –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è b_i –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    basis_values_for_calc = [1000, 1300, 1500, 1800]

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞, –±–µ–∑ –≤—ã–≤–æ–¥–∞)
    m = len(rhs)  # —á–∏—Å–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    delta_b_upper = []  # –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã Œîb_iB (–±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Gmax)

    for i in range(m):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º i-–π —Å—Ç–æ–ª–±–µ—Ü D^{-1}
        column = [D_inv[j][i] for j in range(m)]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É Œîb_iB (–¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–æ–ª–±—Ü–∞)
        negative_elements = [(j, val) for j, val in enumerate(column) if val < 0]
        if negative_elements:
            delta_b_b_values = [basis_values_for_calc[j] / val for j, val in negative_elements]
            delta_b_b_raw = max(delta_b_b_values)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, -1200
            delta_b_b = abs(delta_b_b_raw)  # –±–µ—Ä—ë–º –º–æ–¥—É–ª—å, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ (1300)
        else:
            delta_b_b = float('inf')

        delta_b_upper.append(delta_b_b if delta_b_b != float('inf') else '+‚àû')

    # –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ Gmax
    delta_Gmax = 4550
    for i in range(m):
        if y_opt[i] > 0 and delta_b_upper[i] != '+‚àû':
            delta_b_iB = float(delta_b_upper[i]) 
            delta_Gmax_i = float(y_opt[i]) * delta_b_iB
            print(f"  ŒîGmax{i+1} ‚âà y{i+1}* √ó Œîb{i+1}B = {float(y_opt[i])} √ó {delta_b_iB} = {delta_Gmax_i}")
            delta_Gmax += delta_Gmax_i

    print(f"\n–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é Gmax –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É:")
    print(f"  ŒîGmax = {delta_Gmax}")

    # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Gmax
    Gmax_new = z_value + delta_Gmax
    print(f"\n–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:")
    print(f"  Gmax ‚âà {z_value} + {delta_Gmax} = {Gmax_new} [—Ç—ã—Å. –¥–µ–Ω. –µ–¥./–Ω–µ–¥–µ–ª—é]")

# ===== –ü—Ä—è–º–∞—è –∑–∞–¥–∞—á–∞ =====
obj = [7, 5]  # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: 7x1 + 5x2
constraints = [
    [2, 3],  # 2x1 + 3x2 ‚â§ 1000
    [2, 1],  # 2x1 + x2 ‚â§ 1300
    [0, 3],  # 3x2 ‚â§ 1500
    [3, 0]   # 3x1 ‚â§ 1800
]
rhs = [1000, 1300, 1500, 1800]

# –†–µ—à–µ–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–¥–∞—á–∏
z, answer, basis, table = simplex_method(obj, constraints, rhs)

if z is not None:
    print("\n –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–¥–∞—á–∏:")
    print(f"  x1 = {answer[0]}, x2 = {answer[1]}")
    print(f"  f(x) = {z}")

    # –î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    display_dual_problem(obj, constraints, rhs)

    # –í–µ–∫—Ç–æ—Ä C_B (–∏–∑ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –±–∞–∑–∏—Å—É)
    C_B = []
    for b in basis:
        if b < len(obj):
            C_B.append(Rational(obj[b]))
        else:
            C_B.append(Rational(0))

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ D‚Åª¬π
    D_inv = get_D_inverse(constraints, basis, len(obj))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    check_duality_theorem(C_B, D_inv, answer)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    y_opt = check_second_duality_theorem(table, basis, len(constraints), len(obj), rhs)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ—Ç—å–µ–π —Ç–µ–æ—Ä–µ–º—ã –¥–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    y_opt = check_third_duality_theorem(y_opt, rhs)

    # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ Gmax (–±–µ–∑ –≤—ã–≤–æ–¥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
    analyze_stability_and_impact(y_opt, rhs, z)